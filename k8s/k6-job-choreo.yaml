apiVersion: batch/v1
kind: Job
metadata:
  name: k6-choreo-loadtest
  namespace: default
spec:
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: k6
        image: grafana/k6:latest
        imagePullPolicy: IfNotPresent
        command: ["k6", "run", "/scripts/load.js"]

        volumeMounts:
        - name: scripts
          mountPath: /scripts
      volumes:
      - name: scripts
        configMap:
          name: k6-scripts
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-scripts
  namespace: default
data:
  load.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';

    export let options = {
      vus: 20,                 // virtualūs vartotojai
      duration: '1m',          // bendra trukmė
      thresholds: {            // sėkmės kriterijai
        http_req_failed: ['rate<0.05'],   // <5 % klaidų
        http_req_duration: ['p(95)<1000'] // p95 < 1 s
      }
    };

    const ORDER = __ENV.GW_URL || 'http://order-service';

    export default function () {
    
      const payload = JSON.stringify({
        orderName: "v"
        // add any other required properties here
      });
      const params = {
        headers: { 'Content-Type': 'application/json' }
      };

      let res = http.post(`${ORDER}/order/choreography`, payload, params);
      console.log(`Response status: ${res.status}`);
      check(res, { 'status 202': r => r.status === 202 });
      sleep(1);
    }

